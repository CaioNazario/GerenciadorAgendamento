#!/usr/bin/env pwsh

param(
    [Parameter(Mandatory=$true, HelpMessage="Tipo da mudan√ßa (feat, fix, docs, style, refactor, test, chore, perf)")]
    [ValidateSet("feat", "fix", "docs", "style", "refactor", "test", "chore", "perf")]
    [string]$Type,
    
    [Parameter(Mandatory=$false, HelpMessage="Escopo da mudan√ßa (opcional: api, auth, ui, etc)")]
    [string]$Scope,
    
    [Parameter(Mandatory=$true, HelpMessage="Descri√ß√£o da mudan√ßa")]
    [string]$Description
)

# Constr√≥i a mensagem de commit
$COMMIT_MSG = $Type

# Adiciona o escopo se fornecido
if (-not [string]::IsNullOrEmpty($Scope)) {
    $COMMIT_MSG = "$COMMIT_MSG($Scope)"
}

# Adiciona os dois pontos e a descri√ß√£o
$COMMIT_MSG = "$COMMIT_MSG: $Description"

Write-Host "üîÑ Iniciando processo de commit..." -ForegroundColor Cyan

# Adiciona todos os arquivos modificados
try {
    git add .
    Write-Host "‚úîÔ∏è Arquivos adicionados ao stage." -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro ao adicionar arquivos ao stage: $_" -ForegroundColor Red
    exit 1
}

# Executa o commit
try {
    git commit -m $COMMIT_MSG
    Write-Host "üöÄ Commitado com sucesso: $COMMIT_MSG" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro ao fazer commit: $_" -ForegroundColor Red
    exit 1
}

# Envia as altera√ß√µes para o reposit√≥rio remoto
try {
    git push
    Write-Host "‚úÖ Push realizado! Seu trabalho est√° a salvo nas nuvens." -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro ao fazer push: $_" -ForegroundColor Red
    exit 1
}

Write-Host "üéâ Processo conclu√≠do com sucesso!" -ForegroundColor Magenta
