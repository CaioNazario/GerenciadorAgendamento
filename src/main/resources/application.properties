# =========================================================
# == application.properties - Configura\u00E7\u00E3o da Aplica\u00E7\u00E3o Java ==
# =========================================================

# --- Identifica\u00E7\u00E3o da Aplica\u00E7\u00E3o ---
# Boa pr\u00E1tica para identificar sua aplica\u00E7\u00E3o em logs e no Spring.
# Use o nome que voc\u00EA padronizou no seu projeto.
spring.application.name=gerenciador

# --- Conex\u00E3o com o Banco de Dados (PostgreSQL) ---
# Estes valores ser\u00E3o substitu\u00EDdos pelas vari\u00E1veis de ambiente que o
# Docker Compose injetar a partir do seu arquivo .env.
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}

# --- Configura\u00E7\u00E3o do JPA / Hibernate ---
# Define o "dialeto" SQL espec\u00EDfico do PostgreSQL para o Hibernate.
# Isso garante que os comandos SQL gerados sejam 100% compat\u00EDveis.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Estrat\u00E9gia de gera\u00E7\u00E3o do schema. 'validate' \u00E9 a mais segura para usar com Flyway.
# Ela verifica se as tabelas do banco correspondem \u00E0s suas classes @Entity no Java
# e falha ao iniciar a aplica\u00E7\u00E3o se houver inconsist\u00EAncias.
spring.jpa.hibernate.ddl-auto=update

# --- Configura\u00E7\u00E3o de Migrations com Flyway ---
# Garante que o Flyway estar\u00E1 ativo para procurar e rodar os scripts de
# migra\u00E7\u00E3o na pasta 'db/migration' durante a inicializa\u00E7\u00E3o da aplica\u00E7\u00E3o.
spring.flyway.enabled=false

# --- Segredos da Aplica\u00E7\u00E3o (Ex: JWT) ---
# Mapeia a vari\u00E1vel de ambiente JWT_SECRET para uma propriedade que voc\u00EA
# pode usar facilmente no seu c\u00F3digo com @Value("${jwt.secret}").
jwt.secret=${JWT_SECRET}